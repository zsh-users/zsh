#compdef nmcli

# compatible with nmcli 1.8.4

_nmcli() {
  local curcontext="$curcontext" line

  _arguments -C \
    '(-p -pretty -t -terse)-t'{,erse}'[terse output]' \
    '(-p -pretty -t -terse)-p'{,retty}'[pretty output]' \
    '(-m -mode)-m'{,ode}'[output mode]:mode:(tabular multiline)' \
    '(-c -colors)-c'{,olors}'[whether to use colors in output]:value:(auto yes no)' \
    '(-f -fields)-f'{,ields}'[specify fields to output]:field:_nmcli_fields' \
    '(-f -fields -g -get-values -m -mode -p -pretty -t -terse)-g'{,et-values}'[shortcut for -m tabular -t -f]:field:_nmcli_fields' \
    '(-e -escape)-e'{,scape}'[escape column separators in values]:value:(yes no)' \
    '(-a -ask)-a'{,sk}'[ask for missing parameters]' \
    '(-s -show-secrets)-s'{,how-secrets}'[allow passwords to be displayed]' \
    '(-w -wait)-w'{,ait}'[set time limit on wait for operations to finish]:timeout (seconds)' \
    '(- *)-v'{,ersion}'[show program version]' \
    '(- *)-h'{,elp}'[print help]' \
    '1: :(general networking radio connection device agent monitor help)' \
    '*::arg:->args'

  case $line[1] in
    g*) _nmcli_general ;;
    n*) _nmcli_networking ;;
    r*) _nmcli_radio ;;
    c*) _nmcli_connection ;;
    d*) _nmcli_device ;;
    a*) _nmcli_agent ;;
  esac
}

_nmcli_fields() {
  _values -s , 'field to output' \
    all common \
    RUNNING VERSION STATE STARTUP CONNECTIVITY NETWORKING WIFI-HW WIFI WWAN-HW WWAN \
    NAME UUID TYPE TIMESTAMP TIMESTAMP-REAL AUTOCONNECT AUTOCONNECT-PRIORITY READONLY DBUS-PATH ACTIVE DEVICE STATE ACTIVE-PATH SLAVE \
    DEVICE CONNECTION CON-UUID CON-PATH BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY
}

_nmcli_general() {
  _arguments "1:command:(status hostname permissions logging help)"
  # TODO: provide completions for logging
}

_nmcli_networking() {
  local curcontext="$curcontext" line

  _arguments -C \
    "1:command:(on off connectivity help)" \
    "*::arg:->args"

  case $line[1] in
    c*) _nmcli_networking_connectivity ;;
  esac
}

_nmcli_networking_connectivity() {
  _arguments "1:flag:(check)"
}

_nmcli_radio() {
  _arguments \
    "1:type:(all wifi wwan help)" \
    "2:switch:(on off)"
}

_nmcli_connection() {
  local curcontext="$curcontext" line

  _arguments -C \
    "1:command:(show up down add modify clone edit delete monitor reload load import export help)" \
    "*::arg:->args"

  case $line[1] in
    s*)   _nmcli_connection_show ;;
    u*)   _nmcli_connection_up ;;
    d*)   _nmcli_connection_down ;;
    # TODO: a*) _nmcli_connection_add ;;
    m*)   _nmcli_connection_modify ;;
    c*)   _nmcli_connection_clone ;;
    e*)   _nmcli_connection_edit ;;
    de*)  _nmcli_connection_delete ;;
    mon*) _nmcli_connection_monitor ;;
    l*)   _nmcli_connection_load ;;
    i*)   _nmcli_connection_import ;;
    ex*)  _nmcli_connection_export ;;
  esac
}

_nmcli_connection_show() {
  # TODO: add support for --order
  _arguments \
    "--active" \
    "1:connection:_nmcli_connection_specs"
}

_nmcli_connection_up() {
  # TODO: add support for ifname, ap and passwd-file parameters
  _arguments "1:connection:_nmcli_connection_specs"
}

_nmcli_connection_down() {
  _arguments "1:connection:_nmcli_connection_specs"
}

_nmcli_connection_modify() {
  # TODO: add support for options and properties
  _arguments \
    "--temporary" \
    "1:connection:_nmcli_connection_specs"
}

_nmcli_connection_clone() {
  _arguments \
    "--temporary" \
    "1:connection:_nmcli_connection_specs" \
    "2:new name"
}

_nmcli_connection_edit() {
  # TODO: add support for adding new connections (type and con-name parameters)
  _arguments "1:connection:_nmcli_connection_specs"
}

_nmcli_connection_delete() {
  _arguments "*:connection:_nmcli_connection_specs"
}

_nmcli_connection_monitor() {
  _arguments "*:connection:_nmcli_connection_specs"
}

_nmcli_connection_load() {
  _files
}

_nmcli_connection_import() {
  _arguments \
    "--temporary" \
    "1: :(type)" \
    "2:type:(vpnc openvpn pptp openconnect openswan libreswan ssh l2tp iodine)" \
    "3: :(file)" \
    "4:file:_files"
}

_nmcli_connection_export() {
  _arguments \
    "1:connection:_nmcli_connection_specs" \
    "2:file:_files"
}

_nmcli_connection_specs() {
  # TODO: add support for uuids and D-Bus paths
  _nmcli_connection_ids
}

_nmcli_connection_ids() {
  local -a con_ids
  con_ids=(${(f)"$(_call_program nmcli nmcli -t -f name connection)"})
  _describe 'select connection' con_ids
}

_nmcli_device() {
  local curcontext="$curcontext" line

  _arguments -C \
    "1:command:(status show set connect reapply modify disconnect delete monitor wifi lldp help)" \
    "*::arg:->args"

  case $line[1] in
    sh*)  _nmcli_device_show ;;
    se*)  _nmcli_device_set ;;
    c*)   _nmcli_device_connect ;;
    r*)   _nmcli_device_reapply ;;
    mod*) _nmcli_device_modify ;;
    d*)   _nmcli_device_disconnect ;;
    de*)  _nmcli_device_delete ;;
    m*)   _nmcli_device_monitor ;;
    w*)   _nmcli_device_wifi ;;
    l*)   _nmcli_device_lldp ;;
  esac
}

_nmcli_device_show() {
  _arguments "1:interface:_nmcli_device_ifnames"
}

_nmcli_device_set() {
  # TODO: allow specifying both options, and in any order
  _arguments \
    "1:interface:_nmcli_device_ifnames" \
    "2:property:(autoconnect managed)" \
    "3:switch:(yes no)"
}

_nmcli_device_connect() {
  _arguments "1:interface:_nmcli_device_ifnames"
}

_nmcli_device_reapply() {
  _arguments "1:interface:_nmcli_device_ifnames"
}

_nmcli_device_modify() {
  # TODO: add support for settings
  _arguments "1:interface:_nmcli_device_ifnames"
}

_nmcli_device_disconnect() {
  _arguments "*:interface:_nmcli_device_ifnames"
}

_nmcli_device_delete() {
  _arguments "*:interface:_nmcli_device_ifnames"
}

_nmcli_device_monitor() {
  _arguments "*:interface:_nmcli_device_ifnames"
}

_nmcli_device_wifi() {
  local curcontext="$curcontext" line

  _arguments -C \
    "1:command:(list connect hotspot rescan)" \
    "*::arg:->args"

  case $line[1] in
    l*)  _nmcli_device_wifi_list ;;
    c*)  _nmcli_device_wifi_connect ;;
    ho*) _nmcli_device_wifi_hotspot ;;
    r*)  _nmcli_device_wifi_rescan ;;
  esac
}

_nmcli_device_wifi_list() {
  # TODO: support bssid on its own
  _arguments \
    "1: :(ifname)" \
    "2:interface:_nmcli_device_ifnames" \
    "3: :(bssid)" \
    "4:bssid:_nmcli_device_wifi_bssids"
}

_nmcli_device_wifi_connect() {
  local curcontext="$curcontext" line

  _arguments -C \
    "1:ssid:_nmcli_device_wifi_ssids" \
    "*::arg:->args"

  if [[ -n $line[1] ]]; then
    _nmcli_device_wifi_connect_opts
  fi
}

_nmcli_device_wifi_connect_opts() {
  # TODO: there must be a cleaner way to implement this
  local curcontext="$curcontext" line

  _arguments -C \
    "1:property:(password wep-key-type ifname bssid name private hidden)" \
    "*::arg:->args"

  local min_line_len=2
  case $line[-2] in
    password)
      _arguments -C "1:password" "*::arg:->args"
      ;;
    wep-key-type)
      _arguments -C "1:wep key type:(key phrase)" "*::arg:->args"
      ;;
    ifname)
      _arguments -C "1:device:_nmcli_device_ifnames" "*::arg:->args"
      ;;
    bssid)
      _arguments -C "1:bssid:_nmcli_device_wifi_bssids" "*::arg:->args"
      ;;
    name)
      _arguments -C "1:name" "*::arg:->args"
      ;;
    private)
      _arguments -C "1:private:(yes no)" "*::arg:->args"
      ;;
    hidden)
      _arguments -C "1:hidden:(yes no)" "*::arg:->args"
      ;;
    *)
      min_line_len=1
      ;;
  esac
  if [[ $#line > $min_line_len ]]; then
    _nmcli_device_wifi_connect_opts
  fi
}

_nmcli_device_wifi_hotspot() {
  local curcontext="$curcontext" line

  _arguments -C \
    "1:property:(ifname con-name ssid band channel password)" \
    "*::arg:->args"

  local min_line_len=2
  case $line[-2] in
    ifname)
      _arguments -C "1:device:_nmcli_device_ifnames" "*::arg:->args"
      ;;
    con-name)
      _arguments -C "1:connection name" "*::arg:->args"
      ;;
    ssid)
      _arguments -C "1:ssid" "*::arg:->args"
      ;;
    band)
      _arguments -C "1:band:(a bg)" "*::arg:->args"
      ;;
    channel)
      _arguments -C "1:channel" "*::arg:->args"
      ;;
    password)
      _arguments -C "1:password" "*::arg:->args"
      ;;
    *)
      min_line_len=1
      ;;
  esac
  if [[ $#line > $min_line_len ]]; then
    _nmcli_device_wifi_hotspot
  fi
}

_nmcli_device_wifi_rescan() {
  # TODO: support ssid on its own and multiple ssids
  _arguments \
    "1: :(ifname)" \
    "2:interface:_nmcli_device_ifnames" \
    "3: :(ssid)" \
    "4:ssid:_nmcli_device_wifi_ssids"
}

_nmcli_device_wifi_bssids() {
  local -a bssids
  bssids=(${(f)"$(_call_program nmcli nmcli -t -f bssid device wifi list)"})
  _describe 'select network' bssids
}

_nmcli_device_wifi_ssids() {
  local -a ssids
  ssids=(${(f)"$(_call_program nmcli nmcli -t -f ssid device wifi list)"})
  _describe 'select network' ssids
}

_nmcli_device_lldp() {
  _arguments \
    "1: :(list)" \
    "2: :(ifname)" \
    "3:interface:_nmcli_device_ifnames"
}

_nmcli_device_ifnames() {
  local -a ifnames
  ifnames=(${(f)"$(_call_program nmcli nmcli -t -f device device)"})
  _describe 'select device' ifnames
}

_nmcli_agent() {
  _arguments "1:type:(secret polkit all help)"
}

_nmcli "$@"
